{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"/Users/shivam/Downloads/ratings-review-system/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from \"react\";\nimport api from \"../config/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    const userData = localStorage.getItem(\"user\");\n    console.log(\"AuthContext: Checking stored auth data\", {\n      hasToken: !!token,\n      hasUser: !!userData\n    });\n    if (token && userData) {\n      try {\n        const parsedUser = JSON.parse(userData);\n        setUser(parsedUser);\n        console.log(\"AuthContext: User restored from localStorage\", parsedUser);\n      } catch (error) {\n        console.error(\"AuthContext: Error parsing stored user data\", error);\n        localStorage.removeItem(\"token\");\n        localStorage.removeItem(\"user\");\n      }\n    }\n    setLoading(false);\n  }, []);\n  const register = async (username, email, password) => {\n    try {\n      console.log(\"=== AuthContext: Starting registration ===\");\n      console.log(\"Registration data:\", {\n        username,\n        email,\n        passwordLength: password === null || password === void 0 ? void 0 : password.length\n      });\n\n      // Client-side validation to match backend validation\n      if (!username || !email || !password) {\n        console.log(\"AuthContext: Missing required fields\");\n        return {\n          success: false,\n          error: \"All fields are required\"\n        };\n      }\n\n      // Username validation (matches backend Joi validation)\n      if (username.length < 3) {\n        return {\n          success: false,\n          error: \"Username must be at least 3 characters long\"\n        };\n      }\n      if (username.length > 30) {\n        return {\n          success: false,\n          error: \"Username cannot be longer than 30 characters\"\n        };\n      }\n      if (!/^[a-zA-Z0-9]+$/.test(username)) {\n        return {\n          success: false,\n          error: \"Username can only contain letters and numbers\"\n        };\n      }\n\n      // Password validation (matches backend)\n      if (password.length < 6) {\n        return {\n          success: false,\n          error: \"Password must be at least 6 characters long\"\n        };\n      }\n\n      // Email validation (matches backend)\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(email)) {\n        return {\n          success: false,\n          error: \"Please enter a valid email address\"\n        };\n      }\n      console.log(\"AuthContext: Making API request...\");\n\n      // Request data that matches backend expectations exactly\n      const requestData = {\n        username: username.trim(),\n        email: email.trim().toLowerCase(),\n        password: password\n      };\n      console.log(\"AuthContext: Request data:\", requestData);\n      const response = await api.post(\"/auth/register\", requestData);\n      console.log(\"AuthContext: Registration API response:\", response.data);\n\n      // Backend returns: { message, token, user: { id, username, email } }\n      const {\n        token,\n        user: userData,\n        message\n      } = response.data;\n      if (!token || !userData) {\n        console.error(\"AuthContext: Invalid response format\", response.data);\n        return {\n          success: false,\n          error: \"Invalid server response - missing token or user data\"\n        };\n      }\n\n      // Store auth data\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"user\", JSON.stringify(userData));\n      setUser(userData);\n      console.log(\"AuthContext: Registration successful\", {\n        message,\n        user: userData\n      });\n      return {\n        success: true,\n        user: userData,\n        token,\n        message\n      };\n    } catch (error) {\n      var _error$response, _error$response2, _error$response3, _error$response3$data, _error$response4, _error$response4$data, _error$response5, _error$response5$data, _error$response6, _error$response7, _error$response8;\n      console.error(\"=== AuthContext: Registration error ===\");\n      console.error(\"Error object:\", error);\n      console.error(\"Response data:\", (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n      console.error(\"Response status:\", (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status);\n      let errorMessage = \"Registration failed\";\n\n      // Handle different error response formats from backend\n      if ((_error$response3 = error.response) !== null && _error$response3 !== void 0 && (_error$response3$data = _error$response3.data) !== null && _error$response3$data !== void 0 && _error$response3$data.error) {\n        errorMessage = error.response.data.error;\n      } else if ((_error$response4 = error.response) !== null && _error$response4 !== void 0 && (_error$response4$data = _error$response4.data) !== null && _error$response4$data !== void 0 && _error$response4$data.message) {\n        errorMessage = error.response.data.message;\n      } else if ((_error$response5 = error.response) !== null && _error$response5 !== void 0 && (_error$response5$data = _error$response5.data) !== null && _error$response5$data !== void 0 && _error$response5$data.details) {\n        errorMessage = error.response.data.details;\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      return {\n        success: false,\n        error: errorMessage,\n        details: {\n          status: (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.status,\n          statusText: (_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.statusText,\n          data: (_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data,\n          message: error.message\n        }\n      };\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      console.log(\"=== AuthContext: Starting login ===\");\n      console.log(\"Login data:\", {\n        email,\n        passwordLength: password === null || password === void 0 ? void 0 : password.length\n      });\n      if (!email || !password) {\n        return {\n          success: false,\n          error: \"Email and password are required\"\n        };\n      }\n      const requestData = {\n        email: email.trim().toLowerCase(),\n        password: password\n      };\n      console.log(\"AuthContext: Making login request...\");\n      const response = await api.post(\"/auth/login\", requestData);\n      console.log(\"AuthContext: Login API response:\", response.data);\n\n      // Backend returns: { message, token, user: { id, username, email } }\n      const {\n        token,\n        user: userData,\n        message\n      } = response.data;\n      if (!token || !userData) {\n        return {\n          success: false,\n          error: \"Invalid server response - missing token or user data\"\n        };\n      }\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"user\", JSON.stringify(userData));\n      setUser(userData);\n      console.log(\"AuthContext: Login successful\", {\n        message,\n        user: userData\n      });\n      return {\n        success: true,\n        user: userData,\n        token,\n        message\n      };\n    } catch (error) {\n      var _error$response9, _error$response0, _error$response0$data, _error$response1, _error$response1$data, _error$response10, _error$response11;\n      console.error(\"=== AuthContext: Login error ===\");\n      console.error(\"Error:\", ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.data) || error.message);\n      let errorMessage = \"Login failed\";\n      if ((_error$response0 = error.response) !== null && _error$response0 !== void 0 && (_error$response0$data = _error$response0.data) !== null && _error$response0$data !== void 0 && _error$response0$data.error) {\n        errorMessage = error.response.data.error;\n      } else if ((_error$response1 = error.response) !== null && _error$response1 !== void 0 && (_error$response1$data = _error$response1.data) !== null && _error$response1$data !== void 0 && _error$response1$data.message) {\n        errorMessage = error.response.data.message;\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      return {\n        success: false,\n        error: errorMessage,\n        details: {\n          status: (_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : _error$response10.status,\n          data: (_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : _error$response11.data\n        }\n      };\n    }\n  };\n  const logout = () => {\n    console.log(\"AuthContext: Logging out\");\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    setUser(null);\n  };\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","_s2","createContext","useContext","useState","useEffect","api","jsxDEV","_jsxDEV","AuthContext","useAuth","context","Error","AuthProvider","children","user","setUser","loading","setLoading","token","localStorage","getItem","userData","console","log","hasToken","hasUser","parsedUser","JSON","parse","error","removeItem","register","username","email","password","passwordLength","length","success","test","emailRegex","requestData","trim","toLowerCase","response","post","data","message","setItem","stringify","_error$response","_error$response2","_error$response3","_error$response3$data","_error$response4","_error$response4$data","_error$response5","_error$response5$data","_error$response6","_error$response7","_error$response8","status","errorMessage","details","statusText","login","_error$response9","_error$response0","_error$response0$data","_error$response1","_error$response1$data","_error$response10","_error$response11","logout","value","Provider","fileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shivam/Downloads/ratings-review-system/frontend/src/context/AuthContext.js"],"sourcesContent":["\"use client\"\n\nimport { createContext, useContext, useState, useEffect } from \"react\"\nimport api from \"../config/api\"\n\nconst AuthContext = createContext()\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\")\n  }\n  return context\n}\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\")\n    const userData = localStorage.getItem(\"user\")\n\n    console.log(\"AuthContext: Checking stored auth data\", { hasToken: !!token, hasUser: !!userData })\n\n    if (token && userData) {\n      try {\n        const parsedUser = JSON.parse(userData)\n        setUser(parsedUser)\n        console.log(\"AuthContext: User restored from localStorage\", parsedUser)\n      } catch (error) {\n        console.error(\"AuthContext: Error parsing stored user data\", error)\n        localStorage.removeItem(\"token\")\n        localStorage.removeItem(\"user\")\n      }\n    }\n    setLoading(false)\n  }, [])\n\n  const register = async (username, email, password) => {\n    try {\n      console.log(\"=== AuthContext: Starting registration ===\")\n      console.log(\"Registration data:\", { username, email, passwordLength: password?.length })\n\n      // Client-side validation to match backend validation\n      if (!username || !email || !password) {\n        console.log(\"AuthContext: Missing required fields\")\n        return {\n          success: false,\n          error: \"All fields are required\",\n        }\n      }\n\n      // Username validation (matches backend Joi validation)\n      if (username.length < 3) {\n        return {\n          success: false,\n          error: \"Username must be at least 3 characters long\",\n        }\n      }\n\n      if (username.length > 30) {\n        return {\n          success: false,\n          error: \"Username cannot be longer than 30 characters\",\n        }\n      }\n\n      if (!/^[a-zA-Z0-9]+$/.test(username)) {\n        return {\n          success: false,\n          error: \"Username can only contain letters and numbers\",\n        }\n      }\n\n      // Password validation (matches backend)\n      if (password.length < 6) {\n        return {\n          success: false,\n          error: \"Password must be at least 6 characters long\",\n        }\n      }\n\n      // Email validation (matches backend)\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n      if (!emailRegex.test(email)) {\n        return {\n          success: false,\n          error: \"Please enter a valid email address\",\n        }\n      }\n\n      console.log(\"AuthContext: Making API request...\")\n\n      // Request data that matches backend expectations exactly\n      const requestData = {\n        username: username.trim(),\n        email: email.trim().toLowerCase(),\n        password: password,\n      }\n\n      console.log(\"AuthContext: Request data:\", requestData)\n\n      const response = await api.post(\"/auth/register\", requestData)\n\n      console.log(\"AuthContext: Registration API response:\", response.data)\n\n      // Backend returns: { message, token, user: { id, username, email } }\n      const { token, user: userData, message } = response.data\n\n      if (!token || !userData) {\n        console.error(\"AuthContext: Invalid response format\", response.data)\n        return {\n          success: false,\n          error: \"Invalid server response - missing token or user data\",\n        }\n      }\n\n      // Store auth data\n      localStorage.setItem(\"token\", token)\n      localStorage.setItem(\"user\", JSON.stringify(userData))\n      setUser(userData)\n\n      console.log(\"AuthContext: Registration successful\", { message, user: userData })\n      return { success: true, user: userData, token, message }\n    } catch (error) {\n      console.error(\"=== AuthContext: Registration error ===\")\n      console.error(\"Error object:\", error)\n      console.error(\"Response data:\", error.response?.data)\n      console.error(\"Response status:\", error.response?.status)\n\n      let errorMessage = \"Registration failed\"\n\n      // Handle different error response formats from backend\n      if (error.response?.data?.error) {\n        errorMessage = error.response.data.error\n      } else if (error.response?.data?.message) {\n        errorMessage = error.response.data.message\n      } else if (error.response?.data?.details) {\n        errorMessage = error.response.data.details\n      } else if (error.message) {\n        errorMessage = error.message\n      }\n\n      return {\n        success: false,\n        error: errorMessage,\n        details: {\n          status: error.response?.status,\n          statusText: error.response?.statusText,\n          data: error.response?.data,\n          message: error.message,\n        },\n      }\n    }\n  }\n\n  const login = async (email, password) => {\n    try {\n      console.log(\"=== AuthContext: Starting login ===\")\n      console.log(\"Login data:\", { email, passwordLength: password?.length })\n\n      if (!email || !password) {\n        return {\n          success: false,\n          error: \"Email and password are required\",\n        }\n      }\n\n      const requestData = {\n        email: email.trim().toLowerCase(),\n        password: password,\n      }\n\n      console.log(\"AuthContext: Making login request...\")\n\n      const response = await api.post(\"/auth/login\", requestData)\n\n      console.log(\"AuthContext: Login API response:\", response.data)\n\n      // Backend returns: { message, token, user: { id, username, email } }\n      const { token, user: userData, message } = response.data\n\n      if (!token || !userData) {\n        return {\n          success: false,\n          error: \"Invalid server response - missing token or user data\",\n        }\n      }\n\n      localStorage.setItem(\"token\", token)\n      localStorage.setItem(\"user\", JSON.stringify(userData))\n      setUser(userData)\n\n      console.log(\"AuthContext: Login successful\", { message, user: userData })\n      return { success: true, user: userData, token, message }\n    } catch (error) {\n      console.error(\"=== AuthContext: Login error ===\")\n      console.error(\"Error:\", error.response?.data || error.message)\n\n      let errorMessage = \"Login failed\"\n\n      if (error.response?.data?.error) {\n        errorMessage = error.response.data.error\n      } else if (error.response?.data?.message) {\n        errorMessage = error.response.data.message\n      } else if (error.message) {\n        errorMessage = error.message\n      }\n\n      return {\n        success: false,\n        error: errorMessage,\n        details: {\n          status: error.response?.status,\n          data: error.response?.data,\n        },\n      }\n    }\n  }\n\n  const logout = () => {\n    console.log(\"AuthContext: Logging out\")\n    localStorage.removeItem(\"token\")\n    localStorage.removeItem(\"user\")\n    setUser(null)\n  }\n\n  const value = {\n    user,\n    login,\n    register,\n    logout,\n    loading,\n  }\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}